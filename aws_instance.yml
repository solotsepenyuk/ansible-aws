---
- name: AWS instance creation
  hosts: localhost
  gather_facts: no
  vars:
    ec2_region: us-east-1
    ec2_name_prefix: Test
    ami_name: RHEL-7.6_HVM_GA-20181017-x86_64-0-Hourly2-GP2
    sec_group_id: sg-0ef65f7a33685f059
    subnet_id: subnet-d69233fb
    instance_type: t2.micro
    roletag: demo_server
    ec2_counter: 2
  tags:
    - create
  tasks:
    - name: Get available VPC ID for {{ ec2_name_prefix }}-vpc
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ ec2_name_prefix }}-vpc"
        region: "{{ ec2_region }}"
      register: vpc_net_facts

    - name: Get the subnet IDs for vpc
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ ec2_region }}"
        filters:
          vpc-id: "{{ vpc_net_facts.vpcs[0].id }}"
      register: subnet_info

    - name: "Find current, region-specific AMI."
      amazon.aws.ec2_ami_info:
        region: "{{ ec2_region }}"
        filters:
          name: "{{ ami_name }}"
      register: found_amis

    - name: "Set AMI value"
      set_fact:
        book_ami: "{{ found_amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}"
      when: found_amis.images is defined

    - name: Setup instances for testing
      amazon.aws.ec2:
        key_name: "{{ aws_key }}"
        instance_type: "{{ instance_type }}"
        image: "{{ book_ami.image_id }}"
        region: "{{ ec2_region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        group_id: "{{ sec_group_id }}"
        wait: yes
        assign_public_ip: yes
        count: "{{ ec2_counter }}"
        volumes:
          - device_name: /dev/xvdb
            volume_size: 5
            delete_on_termination: true
        instance_tags:
          Role: "{{ roletag }}"
          Platform: RHEL
      register: ec2

- name: AWS instances termination
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    ec2_region: us-east-1
    ami_name: RHEL-7.6_HVM_GA-20181017-x86_64-0-Hourly2-GP2
    sec_group_id: sg-0ef65f7a33685f059
    subnet_id: subnet-d69233fb
    roletag: demo_server
    instance_ids: []
  tags:
    - terminate
    - never
  tasks:
    - name: Gather information about any instance with a tag key Role
      community.aws.ec2_instance_info:
        region: "{{ ec2_region }}"
        filters:
          "tag:Role": "{{ roletag }}"
      register: ec2

    - name: build a list of instances to terminate
      set_fact:
        instance_ids: "{{ instance_ids }} + [ '{{ item.instance_id }}' ]"
      with_items: "{{ ec2.instances }}"

    - name: AWS instances termination
      amazon.aws.ec2:
        instance_ids: "{{ instance_ids }}"
        region: "{{ ec2_region }}"
        state: absent
        wait: yes
...
